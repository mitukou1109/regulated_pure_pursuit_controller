#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import *

generator = ParameterGenerator()

grp_robot = generator.add_group("Robot", type="tab")

grp_robot.add("acc_lim_linear", double_t, 0, "The linear acceleration limit of the robot", 2.5, 0, 20.0)
grp_robot.add("min_vel_linear", double_t, 0, "The minimum linear velocity for the robot in m/s", 0.1, 0, 20.0)
grp_robot.add("max_vel_linear", double_t, 0, "The maximum linear velocity for the robot in m/s", 0.5, 0, 20.0)

grp_robot.add("acc_lim_angular", double_t, 0, "The angular acceleration limit of the robot", 3.2, 0, 20.0)
grp_robot.add("min_vel_angular", double_t, 0, "The minimum angular velocity for the robot in rad/s", 0.2, 0, 20.0)
grp_robot.add("max_vel_angular", double_t, 0, "The maximum angular velocity for the robot in rad/s", 1.0, 0, 20.0)

grp_robot.add("is_omnidirectional", bool_t, 0, "Whether the robot is omnidirectional or not", True)

grp_goal = generator.add_group("Goal", type="tab")

grp_goal.add("xy_goal_tolerance", double_t, 0, "The tolerance in meters for the controller in the x & y distance when achieving a goal", 0.25, 0, 2.0)
grp_goal.add("yaw_goal_tolerance", double_t, 0, "The tolerance in radians for the controller in yaw/rotation when achieving its goal", 0.25, 0, 2.0)

grp_pp = generator.add_group("Regulated Pure Pursuit", type="tab")

grp_pp.add("use_velocity_scaled_lookahead_dist", bool_t, 0, "Whether to use the velocity scaled lookahead distances or constant lookahead_distance", True)
grp_pp.add("lookahead_dist", double_t, 0, "The lookahead distance (m) to use to find the lookahead point when use_velocity_scaled_lookahead_dist is false", 0.6, 0, 10.0)
grp_pp.add("min_lookahead_dist", double_t, 0, "The minimum lookahead distance (m) threshold when use_velocity_scaled_lookahead_dist is true", 0.3, 0, 10.0)
grp_pp.add("max_lookahead_dist", double_t, 0, "The maximum lookahead distance (m) threshold when use_velocity_scaled_lookahead_dist is true", 0.9, 0, 10.0)
grp_pp.add("lookahead_time", double_t, 0, "The time (s) to project the velocity by when use_velocity_scaled_lookahead_dist is true. Also known as the lookahead gain", 1.5, 0, 10.0)

grp_pp.add("use_curvature_heuristic", bool_t, 0, "Whether to use the regulated features for path curvature (e.g. slow on high curvature paths)", True)
grp_pp.add("curvature_threshold", double_t, 0, "The curvature (1/m) for which the regulation features are triggered when use_curvature_heuristic is true", 1.1, 0, 10.0)

grp_pp.add("use_proximity_heuristic", bool_t, 0, "Whether to use the regulated features for proximity to obstacles (e.g. slow in close proximity to obstacles)", True)
grp_pp.add("proximity_gain", double_t, 0, "The gain to use for the proximity heuristic when use_proximity_heuristic is true", 0.5, 0, 10.0)
grp_pp.add("proximity_threshold", double_t, 0, "The distance (m) to the closest obstacle for which the regulation features are triggered when use_proximity_heuristic is true", 0.5, 0, 10.0)

grp_pp.add("transform_tolerance", double_t, 0, "The TF transform tolerance (s)", 0.1, 0, 20.0)

exit(generator.generate("regulated_pure_pursuit_controller", "regulated_pure_pursuit_controller", "RegulatedPurePursuitController"))